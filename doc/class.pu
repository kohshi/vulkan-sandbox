@startuml
set namespaceSeparator ::

class Application {
  - VkInstance instance_
  - VkPhysicalDevice physical_device_
  - VkPhysicalDeviceMemoryProperties phys_memory_props_
  - VkDevice device_
  - VkQueue compute_queue_
  - VkCommandPool command_pool_
  - VkDescriptorPool descriptor_pool_
  - std::unique_ptr<vk::Stream> stream_
  - std::unique_ptr<vk::UniformBuffer> uniform_buffer_
  - std::unique_ptr<vk::StagingBuffer> input_buffer_
  - std::unique_ptr<vk::DeviceBuffer> d_input_buffer_
  - std::unique_ptr<vk::StagingBuffer> output_buffer_
  - std::unique_ptr<vk::DeviceBuffer> d_output_buffer_
  - std::vector<std::unique_ptr<vk::ComputeShader<PushConstants>>> compute_shaders_
  - std::vector<VkDescriptorSet> descriptorSets_
  - bool synchronization2_supported_
  + initialize()
  + run()
}

struct vk::Stream {
  - VkDevice device_
  - VkQueue queue_
  - VkCommandPool command_pool_
  - VkCommandBuffer current_command_buf_
  - std::vector<VkCommandBuffer> submitted_command_bufs_
  - VkSemaphore timeline_semaphore_
  - uint64_t timeline_value_
  - const bool synchronize2_supported_
  - PFN_vkCmdPipelineBarrier2KHR vkCmdPipelineBarrier2KHR_
  + begin()
  + copy()
  + dispatch()
  + barrier()
  + submit()
  + synchronize()
}

struct vk::ComputeShader<T> {
  - VkDevice device_
  - VkDescriptorPool descriptor_pool_
  - VkShaderModule shader_module_
  - VkDescriptorSetLayout descriptor_set_layout_
  - VkPipelineLayout pipeline_layout_
  - VkPipeline pipeline_
  - std::vector<VkDescriptorSet> descriptor_sets_
  - VkPushConstantRange push_range_
  - T push_constants_
  + bind()
}

struct vk::UniformBuffer {
  - VkDevice device_
  - VkPhysicalDeviceMemoryProperties phys_mem_props_
  - VkBuffer buffer_
  - VkDeviceMemory memory_
  - void* mapped_
  + allocate()
}

struct vk::StagingBuffer {
  - VkDevice device_
  - VkPhysicalDeviceMemoryProperties phys_mem_props_
  - VkBuffer buffer_
  - VkDeviceMemory memory_
  - void* mapped_
  + allocate()
}

struct vk::DeviceBuffer {
  - VkDevice device_
  - VkPhysicalDeviceMemoryProperties phys_mem_props_
  - VkBuffer buffer_
  - VkDeviceMemory memory_
  + allocate()
}

Application --> vk::Stream
Application --> vk::ComputeShader
Application --> vk::UniformBuffer
Application --> vk::StagingBuffer
Application --> vk::DeviceBuffer
vk::Stream --> vk::ComputeShader
@enduml
